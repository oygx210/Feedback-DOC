function A = computeStateLinearization(x, u, p, UQ)

% State, control, and parameters
rbar  = x(1);
lon   = x(2);
lat   = x(3);
vbar  = x(4);
fpa   = x(5);
azi   = x(6);

CL    = u(1);
bank  = u(2);

CD0   = p(1);
Hbar  = p(2);

% Useful quantities
londot = UQ(1);
latdot = UQ(2);
qbar   = UQ(3);
Dbar   = UQ(4);
Lbar   = UQ(5);
mass   = UQ(6);
mubar  = UQ(7);


% Compute analytical Jacobian
df1dx = [0, 0, 0, sin(fpa), vbar .* cos(fpa), 0];
df2dx = [-londot ./ rbar, 0, londot .* tan(lat), londot ./ vbar, ...
         -vbar .* sin(fpa) .* sin(azi) ./ (rbar .* cos(lat)), ...
         vbar .* cos(fpa) .* cos(azi) ./ (rbar .* cos(lat))];
df3dx = [-latdot ./ rbar, 0, 0, latdot ./ vbar, ...
         -vbar .* sin(fpa) .* cos(azi) ./ rbar, ...
         -vbar .* cos(fpa) .* sin(azi) ./ rbar];
df4dx = [Dbar ./ (mass .* Hbar) + 2 * mubar .* sin(fpa) ./ (rbar .^ 3), ...
         0, 0, -2 * Dbar ./ (mass .* vbar), ...
         -mubar .* cos(fpa) ./ (rbar .^ 2), 0];
df5dx = [-Lbar .* cos(bank) ./ (mass .* vbar .* Hbar) + ...
         2 * mubar .* cos(fpa) ./ (rbar .^3 .* vbar) - ...
         vbar .* cos(fpa) ./ (rbar .^ 2), 0, 0, ...
         Lbar .* cos(bank) ./ (mass .* vbar .^ 2) + ...
         mubar .* cos(fpa) ./ (rbar .^ 2 .* vbar .^ 2) + cos(fpa) ./ rbar, ...
         mubar .* sin(fpa) ./ (rbar .^ 2 .* vbar) - vbar .* sin(fpa) ./ rbar, 0];
df6dx = [-Lbar .* sin(bank) ./ (mass .* vbar .* cos(fpa) .* Hbar) - ...
         vbar .* cos(fpa) .* sin(azi) .* tan(lat) ./ rbar .^ 2, 0, ...
         vbar .* cos(fpa) .* sin(azi) .* sec(lat) .^ 2 ./ rbar, ...
         Lbar .* sin(bank) ./ (mass .* vbar .^ 2 .* cos(fpa)) + ...
         cos(fpa) .* sin(azi) .* tan(lat) ./ rbar, ...
         Lbar .* sin(bank) .* sin(fpa) ./ (mass .* vbar .* cos(fpa) .^ 2) - ...
         vbar .* sin(fpa) .* sin(azi) .* tan(lat) ./ rbar, ...
         vbar .* cos(fpa) .* cos(azi) .* tan(lat) ./ rbar];
     
A     = [df1dx; df2dx; df3dx; df4dx; df5dx; df6dx];
     
end